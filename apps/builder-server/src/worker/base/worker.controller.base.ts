/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WorkerService } from "../worker.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WorkerCreateInput } from "./WorkerCreateInput";
import { Worker } from "./Worker";
import { WorkerFindManyArgs } from "./WorkerFindManyArgs";
import { WorkerWhereUniqueInput } from "./WorkerWhereUniqueInput";
import { WorkerUpdateInput } from "./WorkerUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WorkerControllerBase {
  constructor(
    protected readonly service: WorkerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Worker })
  @nestAccessControl.UseRoles({
    resource: "Worker",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWorker(@common.Body() data: WorkerCreateInput): Promise<Worker> {
    return await this.service.createWorker({
      data: data,
      select: {
        assignedTasks: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Worker] })
  @ApiNestedQuery(WorkerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Worker",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workers(@common.Req() request: Request): Promise<Worker[]> {
    const args = plainToClass(WorkerFindManyArgs, request.query);
    return this.service.workers({
      ...args,
      select: {
        assignedTasks: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Worker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Worker",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async worker(
    @common.Param() params: WorkerWhereUniqueInput
  ): Promise<Worker | null> {
    const result = await this.service.worker({
      where: params,
      select: {
        assignedTasks: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Worker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Worker",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWorker(
    @common.Param() params: WorkerWhereUniqueInput,
    @common.Body() data: WorkerUpdateInput
  ): Promise<Worker | null> {
    try {
      return await this.service.updateWorker({
        where: params,
        data: data,
        select: {
          assignedTasks: true,
          contactInformation: true,
          createdAt: true,
          id: true,
          name: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Worker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Worker",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWorker(
    @common.Param() params: WorkerWhereUniqueInput
  ): Promise<Worker | null> {
    try {
      return await this.service.deleteWorker({
        where: params,
        select: {
          assignedTasks: true,
          contactInformation: true,
          createdAt: true,
          id: true,
          name: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
